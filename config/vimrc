set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'tpope/vim-fugitive'
Bundle 'scrooloose/nerdtree'
Bundle 'mileszs/ack.vim'
Bundle 'FuzzyFinder'
Bundle 'taglist.vim'
Bundle 'Gist.vim'
Bundle 'L9'
Bundle 'kien/ctrlp.vim'
Bundle 'VimClojure'
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/nerdcommenter'
Bundle 'duskhacker/sweet-rspec-vim'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-rails'
Bundle 'confluencewiki.vim'
Bundle 'majutsushi/tagbar'
Bundle 'vim-ruby/vim-ruby'
Bundle 'matchit.zip'
Bundle 'CSApprox'
Bundle 'timcharper/textile.vim'
Bundle 'jimenezrick/vimerl'
Bundle 'rson/vim-conque'
Bundle 'Lokaltog/vim-powerline'
Bundle 'myusuf3/numbers.vim'
Bundle 'JSON.vim'
Bundle 'Syntastic'
Bundle 'jsoncodecs.vim'
Bundle 'jsruntime.vim'
Bundle 'narrow_region'
Bundle 'sourcebeautify.vim'
Bundle 'speeddating.vim'
Bundle 'utl.vim'
Bundle 'vim-json-bundle'
Bundle 'pydave/AsyncCommand'
Bundle 'calendar.vim'
Bundle 'scala.vim'
Bundle 'bufexplorer.zip'
Bundle 'groovy.vim'
Bundle 'repeat.vim'
Bundle 'vim-coffee-script'
Bundle 'closetag.vim'
Bundle 'freitass/todo.txt-vim'


" Bundle 'Lokaltog/vim-easymotion'
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'git://git.wincent.com/command-t.git'


filetype plugin indent on     " required!

" Brief help
" BundleList          - list configured bundles
" BundleInstall(!)    - install(update) bundles
" BundleSearch(!) foo - search(or refresh cache first) for foo
" BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 


set hidden
set number
set wildmenu
set wildignore=*.o,*~,*.pyc
set title

set softtabstop=2
set shiftwidth=2
set tabstop=2
set autoindent
" Use spaces instead of tabs
set expandtab
colorscheme twilight
if has("gui_gtk2")
  set guifont=Inconsolata\ 12
else
  set guifont=Inconsolata:h12
endif

set ignorecase
set vb " turns off visual bell
set smartindent
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=\ %{fugitive#statusline()}     " fugitive
set statusline+=%=                           " right align remainder
set statusline+=0x%-8B                       " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

compiler ruby

set suffixes=.bak,.exe
set suffixes+=.o,.obj,.swp,~,.ncb,.opt,.plg,.aps,.pch,.pdb,.clw
set suffixes+=.class
set suffixes+=.pyc

set splitbelow       " open new window below current one on split
set splitright       " open new window to right current one on split

" Map leaders
let mapleader=","
let maplocalleader=","

" Syntastic settings
let g:syntastic_auto_loc_list=1
let g:syntastic_enable_balloons = 1
let g:syntastic_auto_jump=1

let g:syntastic_ruby_exec = "~/.rbenv/shims/ruby"

" Fuzzy matching settings
let g:fuzzy_ignore = "*.log" 
let g:fuzzy_matching_limit = 70

" Taglist Settings
let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Process_File_Always=1
let Tlist_Show_Menu=1
let Tlist_Enable_Fold_Column=0
let Tlist_Ctags_Cmd="/Users/jeffh/Developer/bin/ctags"


let g:gist_detect_filetype = 1
let g:tagbar_autofocus = 1

" Vimclojure settings
let g:vimclojure#ParenRainbow = 1
let g:vimclojure#HighlightBuiltins = 1 
let g:vimclojure#WantNailgun = 1
let g:vimclojure#SplitPos = "right"
let g:vimclojure#SplitSize = 25

let g:vimclojure#NailgunClient = "/Users/jeffh/bin/ng"

" ConqueTerm settings
let g:ConqueTerm_ReadUnfocused = 1
nmap <silent> <Leader>h :ConqueTermSplit zsh<cr>

let python_highlight_all = 1
let g:Powerline_symbols = 'fancy'

" Toggle between normal and relative line numbering
function! ToggleNumberStyle ()
  if &number
    set relativenumber
  else
    set number
  endif
endf

" Toggle between absolute and relative line numbers
nnoremap <silent> <Leader>ln :call ToggleNumberStyle()<cr>

" Buffer switching
map <S-right> :bn<cr>
map <S-left> :bp<cr>

" Tab management
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

vmap <tab> >gv
vmap <s-tab> <gv

set grepprg=ack
set grepformat=%f:%l:%m

map <leader>t :CtrlP<CR>
map <leader>b :CtrlPBuffer<CR>
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
map <leader>j :TagbarToggle<CR>

" Hold command to do the g for softwrap
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

noremap <silent> <Leader>w :call ToggleWrap()<CR>
function! ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal display+=lastline
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction


nnoremap <silent> <Leader>/ :nohlsearch<CR>

nmap <silent> <leader>gs :Gstatus<cr>
nmap <silent> <leader>ge :Gedit<cr>
nmap <silent> <leader>gd :Gdiff<cr>
nmap <silent> <leader>gP :Git push<cr>
nmap <silent> <leader>gp :Git pull<cr>
let g:Gitv_OpenHorizontal = 1
nmap <silent> <leader>gv :Gitv<cr>
nmap <silent> <leader>gV :Gitv --all<cr>

" ctrlp
let g:ctrlp_working_path_mode = 2
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_files = 20000

" CSApprox
if (&term == 'xterm')
  set t_Co=256
endif

" Suppress lustyjuggler warnings
let g:LustyJugglerSuppressRubyWarning = 1

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set backupdir=~/.vimbackup//,/tmp//
set directory=~/.vimswaps//,/tmp//

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=500		" keep 500 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

if has("gui_running")
  set guioptions=egmrt
endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

au! BufRead,BufNewFile *.confluencewiki set filetype=confluencewiki
augroup confluencewiki
  autocmd!
  autocmd BufRead *\.txt setlocal formatoptions=l
  autocmd BufRead *\.txt setlocal lbr
  autocmd BufRead *\.txt map j gj
  autocmd BufRead *\.txt map k gk
  autocmd BufRead *\.txt setlocal smartindent
  autocmd BufRead *\.txt setlocal spell spelllang=en_us
augroup END

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  autocmd!
  autocmd FileType make     set noexpandtab
  autocmd FileType python   set noexpandtab
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

au! BufRead,BufNewFile *.json set filetype=json 
augroup json_autocmd 
  autocmd! 
  autocmd FileType json setf json
  autocmd FileType json set autoindent 
  autocmd FileType json set formatoptions=tcq2l 
  autocmd FileType json set textwidth=78 shiftwidth=2 
  autocmd FileType json set softtabstop=2 tabstop=8 
  autocmd FileType json set expandtab 
  autocmd FileType json set foldmethod=syntax 
augroup END 

au! BufRead,BufNewFile *.scala set filetype=scala

au! BufRead,BufNewFile *.gradle set filetype=groovy

augroup reload_vimrc
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

