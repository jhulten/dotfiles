#+TITLE: Jeffrey Hulten's Emacs configuration
#+OPTIONS: toc:4 h:4
#+FILETAGS: :dotfiles:emacs:

* About this file

Inspired by the [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]] and [[https://github.com/sachac/.emacs.d/blob/master/Sacha.org][Sacha Chua's Emacs
configuration]], I set up my configuration file using Org-babel. You
could load it with =(org-babel-load-file "/path/to/file")=, changing
the path appropriately, but you'll probably want to tweak it
extensively first.

* Emacs Initialization

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeffrey Hulten"
      user-mail-address "jhulten@gmail.com")

(when (string-match "moz\.com" system-name)
  (setq user-mail-address "jeffrey@moz.com"))

(defvar my-personal-dir (expand-file-name "~/dropbox/emacs/")
  "Base directory for things like org-files and the like")

(defvar my-tmp (expand-file-name "tmp" user-emacs-directory)
  "Temp files that might be useful but that I don't care about.")

(unless (file-exists-p my-tmp) (make-directory my-tmp))

#+END_SRC

** Reloading the init file

Especially in development, I need to reload my init.el and the generated files from org-babel. This makes that easier.

#+BEGIN_SRC emacs-lisp

(global-set-key
  (kbd "C-<f12>")
  (lambda ()
    (interactive)
    (load-file "~/.emacs.d/init.el")))

#+END_SRC

** Customization File

Keep emacs Custom-settings in separate file

#+BEGIN_SRC emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

(load custom-file)

#+END_SRC

** Secrets

Seems we always end up with secrets we need to store in flat files. This picks up an encrypted file managed by freshshell.

#+BEGIN_SRC emacs-lisp
(setq secrets-file (expand-file-name "secrets.el" user-emacs-directory))

(unless (file-exists-p secrets-file)
  (write-region "" nil secrets-file))

(load secrets-file)
#+END_SRC

** Set PATH from Shell

#+BEGIN_SRC emacs-lisp

(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)

#+END_SRC

* UI

** Splash Screen

No thanks...

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-message t)

#+END_SRC

** Theme

I prefer the dark solarized theme for most of my character interfaces (terminal, emacs, etc.)

#+BEGIN_SRC emacs-lisp

  (setq color-themes '())
  (use-package color-theme-solarized
    :config
    (progn 
      (customize-set-variable 'frame-background-mode 'dark)
      (load-theme 'solarized t)))

#+END_SRC

** Menubar, Toolbar, and Scrollbar

You don't need menubar (except on OSX), toolbar nor scrollbar

#+BEGIN_SRC emacs-lisp
(and (fboundp 'menu-bar-mode)
     (not *is-a-mac*)
     (menu-bar-mode -1))
(dolist (mode '(tool-bar-mode scroll-bar-mode))
  (when (fboundp mode) (funcall mode -1)))
#+END_SRC

** Recursive Editing

From http://www.wilfred.me.uk/.emacs.d/init.html#org85df689

We can make the minibuffer much more useful by enabling recursive usage. This means that when the minibuffer is active we can still call commands that require the minibuffer.

#+BEGIN_SRC emacs-lisp

(setq enable-recursive-minibuffers t)

#+END_SRC


It's easy to lose track of whether we're in a recursive minibuffer or not. We display the recursion level in the minibuffer to avoid confusion.

#+BEGIN_SRC emacs-lisp
(minibuffer-depth-indicate-mode 1)
#+END_SRC

Occasionally, you end up with an active minibuffer that you didn't want. ESC ESC ESC will close the minibuffer.

** A bit of assistance `which-key`

Enable [which-key](https://github.com/justbur/emacs-which-key).

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :diminish which-key-mode
    :config
    (progn
      (which-key-mode)
      (which-key-setup-minibuffer))
  )

#+END_SRC

** Undo tree mode - visualize your undos and branches

From https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org

People often struggle with the Emacs undo model, where there’s really no concept of “redo” - you simply undo the undo. # This lets you use C-x u (undo-tree-visualize) to visually walk through the changes you’ve made, undo back to a certain point (or redo), and go down different branches.


#+BEGIN_SRC emacs-lisp

(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

#+END_SRC

** Help - guide-key

From https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org

It’s hard to remember keyboard shortcuts. The guide-key package pops up help after a short delay.

#+BEGIN_SRC emacs-lisp

  (use-package guide-key
    :defer t
    :diminish guide-key-mode
    :config
    (progn
      (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
      (guide-key-mode 1)))  ; Enable guide-key-mode
  
#+END_SRC

* System Specific Settings

** MACOSX

There are configurations to make when running Emacs on OS X (hence the
“darwin” system-type check).

#+BEGIN_SRC emacs-lisp


(when (string-equal system-type "darwin")
  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  (setq ns-function-modifier 'hyper)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "s-`" 'other-window)

  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "s-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  (defun open-dir-in-finder ()
    "Open a new Finder window to the path of the current buffer"
    (interactive)
    (start-process "mai-open-dir-process" nil "open" "."))
  (bind-key "C-c o f" 'open-dir-in-finder)

  (defun open-dir-in-iterm ()
    "Open the current directory of the buffer in iTerm."
    (interactive)
    (let* ((iterm-app-path "/Applications/iTerm.app")
           (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
           (iterm-path (if (file-directory-p iterm-app-path)
                           iterm-app-path
                         iterm-brew-path)))
      (start-process "mai-open-dir-process" nil "open" "-a" iterm-path ".")))
  (bind-key "C-c o t" 'open-dir-in-iterm)

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+END_SRC

exec-path-from-shell makes the command-line path with Emacs’s shell
match the same one on OS X.

#+BEGIN_SRC emacs-lisp


(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))

#+END_SRC

* Backups

Move the backups out of the working directory.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp

(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq version-control t)
(setq vc-make-backup-files t)

#+END_SRC

* Minor Modes

** EVIL MODE - Love my VIM bindings
   :LOGBOOK:
   CLOCK: [2017-02-03 Fri 17:08]--[2017-02-03 Fri 17:29] =>  0:21
   CLOCK: [2017-02-03 Fri 12:37]--[2017-02-03 Fri 13:00] =>  0:23
   :END:

#+BEGIN_SRC emacs-lisp

      (use-package evil
	:defer t
	:init
	(progn
	  (use-package evil-leader
	    :config
	    (progn
	      (setq evil-leader/leader ",")
	      (setq evil-leader/no-prefix-mode-rx '("dired-mode"
					  "gnus-.*-mode"
					  "magit-.*-mode"
					  "notmuch-.*-mode"))
	      (evil-leader/set-key "," 'evilnc-comment-operator
				   "<SPC>" 'ace-jump-char-mode
				   "a"  'projectile-toggle-between-implementation-and-test
				   "b"  'ibuffer
				   "cc" 'evilnc-comment-or-uncomment-lines
				   "ci" 'evilnc-copy-and-comment-lines
				   "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
				   "cp" 'evilnc-comment-or-uncomment-paragraphs
				   ;; "cr" 'comment-or-uncomment-region
				   ;; "cv" 'evilnc-toggle-invert-comment-line-by-line
				   "db" 'kill-buffer
				   "df" 'delete-this-file
				   "dw" 'jcf-delete-window
				   "eb" 'eval-buffer
				   "ed" 'eval-defun
				   "ee" 'eval-expression
				   "es" 'eval-last-sexp
				   "er" 'eval-region
				   "fA" 'helm-do-ag
				   "fa" 'helm-do-ag-project-root
				   "fb" 'helm-buffers-list
				   "fd" 'projectile-dired
				   "ff" 'helm-find-files
				   "fg" 'helm-ls-git-ls
				   "fh" 'helm-resume
				   "fi" 'helm-semantic-or-imenu
				   "fj" 'dired-jump
				   "fl" 'helm-occur
				   "fm" 'helm-mini
				   "fp" 'helm-projectile
				   "fs" 'eshell
				   "fS" 'jcf-eshell-here
				   "fy" 'helm-show-kill-ring
				   "ga" 'git-messenger:popup-message
				   "gb" 'magit-blame-mode
				   "gc" 'magit-commit
				   "gl" 'magit-log
				   "gs" 'magit-status
				   "hf" 'describe-function
				   "hk" 'describe-key
				   "hm" 'describe-mode
				   "hp" 'describe-package
				   "hv" 'describe-variable
				   "i" 'ielm
				   "oa" 'org-agenda
				   "oc" 'org-capture
				   "pL" 'package-list-packages-no-fetch
				   "pa" 'helm-projectile-ag
				   "pb" 'helm-projectile-switch-to-buffer
				   "pe" 'helm-projectile-switch-to-eshell
				   "pf" 'helm-projectile-find-file-dwim
				   "pi" 'package-install
				   "pl" 'package-list-packages
				   "pp" 'helm-projectile-switch-project
				   "rf" 'rename-buffer-and-file
				   "sf" 'delete-other-windows
				   "sj" 'switch-window ; ace-jump will kick in
				   "w"  'save-buffer
				   "x"  'execute-extended-command))))
	:config
	(progn
	  (global-evil-leader-mode 1)
	  (evil-mode 1)))
#+END_SRC


*** TODO evil-surround

*** TODO evil-numbers




*** TODO Org-Evil







** Winner mode - undo and redo window configuration

winner-mode lets you use C-c <left> and C-c <right> to switch between
window configurations. This is handy when something has popped up a
buffer that you want to look at briefly before returning to whatever
you were working on. When you’re done, press C-c <left>.

#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer t)
#+END_SRC

** Helm - interactive completion

Helm makes it easy to complete various things. I find it to be easier
to configure than ido in order to get completion in as many places as
possible.

#+BEGIN_SRC emacs-lisp

(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ;; USE SMEX ("M-x" . helm-M-x)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
;;         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

#+END_SRC

*** DONE helm-projectile
    CLOSED: [2017-02-06 Mon 13:53]
    :PROPERTIES:
    :Effort:   :30
    :END:
    :LOGBOOK:
    CLOCK: [2017-02-06 Mon 13:16]--[2017-02-06 Mon 13:53] =>  0:37
    :END:

#+BEGIN_SRC emacs-lisp

  (use-package helm-projectile
    :config
    (progn
      (helm-projectile-on)
    ))

#+END_SRC

** Flycheck - Syntax Checker

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :if (display-graphic-p)
    :bind ("C-c f" . flycheck-mode)
    :config
    (progn
      (defun jh/on-flycheck-status-change (status)
	(let ((fc-icon
	       (cond
		((eq status 'running) [#xF0F4])
		((eq status 'errored) [#xF00C])
		((eq status 'finished) [#xF00D]))))
	  (diminish #'flycheck-mode (concat " " fc-icon))
	  (force-mode-line-update)))

      (add-hook 'flycheck-status-changed-functions #'jh/on-flycheck-status-change)))

#+END_SRC

** AG - The Silver Searcher

#+BEGIN_SRC emacs-lisp

  (use-package ag
    :defines my-ag-keymap
    :bind-keymap ("C-c C-a" . my-ag-map)
    :config
    (progn
      (setq ag-reuse-buffers t    ; Don't spam buffer list with ag buffers
	    ag-highlight-search t ; A little fanciness

	    ;; Use Projectile to find the project root
	    ag-project-root-function
	    (lambda (d)
	      (let ((default-directory d))
		(projectile-project-root))))

      (defvar my-ag-map
	(let ((map (make-sparse-keymap)))
	  (define-key map (kbd "a") #'ag-regexp)
	  (define-key map (kbd "p") #'ag-project-regexp)

	  map))))

#+END_SRC

** Projectile - Project Interaction

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :init
    (progn
      (projectile-global-mode))
    :config
    (progn
      (define-key projectile-mode-map [remap projectile-ack] #'projectile-ag)
      (setq projectile-completion-system 'grizzl))
    :diminish projectile-mode)

#+END_SRC

** Dired+

#+BEGIN_SRC emacs-lisp

(use-package dired+
  :config
  (progn
    ;; Remove stupid font-locking
    (setf (nth 3 diredp-font-lock-keywords-1)
          ;; Properly handle the extensions
          '("[^ .\\/]\\(\\.[^. /]+\\)$" 1 diredp-file-suffix))
    (setf (nth 4 diredp-font-lock-keywords-1)
          ;; Properly handle the extensions
          '("\\([^ ]+\\) -> .+$" 1 diredp-symlink))
    (setf (nth 6 diredp-font-lock-keywords-1)
          (list (concat "^  \\(.*\\(" (concat (mapconcat 'regexp-quote
                                                          (or (and (boundp 'dired-omit-extensions)
                                                                   dired-omit-extensions)
                                                              completion-ignored-extensions)
                                                          "[*]?\\|")
                                              "[*]?")        ; Allow for executable flag (*).
                        "\\)\\)$") ; Do not treat compressed files as garbage... why the hell!
                1 diredp-ignored-file-name t))
    ))


#+END_SRC

** Dired Subtree

#+BEGIN_SRC emacs-lisp

  (use-package dired-subtree
    :init
    (bind-keys :map dired-mode-map
               :prefix "C-,"
               :prefix-map dired-subtree-map
               :prefix-docstring "Dired subtree map."
      ("<C-i-key>" . dired-subtree-insert)
      ("C-/" . dired-subtree-apply-filter)
      ("C-k" . dired-subtree-remove)
      ("C-n" . dired-subtree-next-sibling)
      ("C-p" . dired-subtree-previous-sibling)
      ("C-u" . dired-subtree-up)
      ("C-d" . dired-subtree-down)
      ("C-a" . dired-subtree-beginning)
      ("C-e" . dired-subtree-end)
      ("C-c" . dired-subtree-cycle)
      ("m" . dired-subtree-mark-subtree)
      ("u" . dired-subtree-unmark-subtree)
      ("C-o C-f" . dired-subtree-only-this-file)
      ("C-o C-d" . dired-subtree-only-this-directory)))

#+END_SRC

** SMEX

#+BEGIN_SRC emacs-lisp

(use-package smex
  :ensure t
  :bind (("M-x" . smex))
  :config (smex-initialize))

#+END_SRC

** Smartparens

#+BEGIN_SRC emacs-lisp

(use-package smartparens-config
    :ensure smartparens
    :commands (turn-on-smartparens-strict-mode)
    :demand t
    :init
    (progn
      (add-hook 'lisp-mode-hook #'turn-on-smartparens-strict-mode)
      (add-hook 'emacs-lisp-mode-hook #'turn-on-smartparens-strict-mode))
    :config
    (progn
      (setq sp-show-pair-delay 0)
      (show-smartparens-global-mode t))
    :bind
    (:map smartparens-mode-map
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)

          ("C-M-d" . sp-down-sexp)
          ("C-M-e" . sp-up-sexp)

          ("C-M-a" . sp-backward-down-sexp)
          ("C-M-u" . sp-backward-up-sexp)

          ("C-S-d" . sp-beginning-of-sexp)
          ("C-S-a" . sp-end-of-sexp)

          ("C-M-n" . sp-next-sexp)
          ("C-M-p" . sp-previous-sexp)

          ("C-M-k" . sp-kill-sexp)
          ("C-M-w" . sp-copy-sexp)

          ("M-[" . sp-backward-unwrap-sexp)
          ("M-]" . sp-unwrap-sexp)

          ("C-)" . sp-forward-slurp-sexp)
          ("C-(" . sp-forward-barf-sexp)
          ("C-M-)"  . sp-backward-slurp-sexp)
          ("C-M-("  . sp-backward-barf-sexp)

          ("M-D" . sp-splice-sexp)
          ("C-M-<delete>" . sp-spilce-sexp-killing-forward)
          ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
          ("C-S-<backspace>" . sp-splice-sexp-killing-around)

          ("C-]" . sp-select-next-thing-exchange)
          ("C-M-]" . sp-select-next-thing)

          ("M-F" . sp-forward-symbol)
          ("M-B" . sp-backward-symbol)
          ("M-q" . sp-indent-defun)
          ("M-r" . sp-raise-sexp)))

#+END_SRC

** TRAMP - Remote Access


#+BEGIN_SRC emacs-lisp

(use-package tramp
  :config
  (setq tramp-default-method "ssh"
        tramp-persistency-file-name (expand-file-name "tramp" my-tmp)))

#+END_SRC

** Dash Integration

#+BEGIN_SRC emacs-lisp

(use-package dash-at-point
  :bind (("C-c d" . dash-at-point))
)

#+END_SRC

** Company - Auto Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :defer 2
    :bind ("C-." . company-complete)
    :config
    (progn
      (global-company-mode t)
      (add-hook 'after-init-hook 'global-company-mode)

      (setq company-begin-commands '(self-insert-command))
      (setq company-idle-delay .3)
      (setq company-tooltip-align-annotations 't)
      (setq company-tooltip-limit 20)))

#+END_SRC

** Magit - Git Magic

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq vc-handled-backends nil))

#+END_SRC

* Major Modes


** TODO Python

   - Anaconda mode?

** TODO Asciidoc

** YAML

#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :mode "\\.yaml\\'"
  :ensure t)

#+END_SRC

*** TODO MobileOrg

** JSON

#+BEGIN_SRC emacs-lisp

(use-package json-mode
  :mode "\\.json\\'"
  :ensure t)

#+END_SRC

** Org-Mode

#+BEGIN_SRC emacs-lisp

  (use-package org
    :ensure org-plus-contrib
    :mode ("\\.org\\'" . org-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile))
    :config
    (progn
      (setq org-ctrl-k-protect-subtree t)
      (setq org-id-method 'uuidgen)
      (setq org-special-ctrl-k t)
      (setq org-special-ctrl-a t)
      (setq org-special-ctrl-e t)
      (setq org-src-fontify-natively t)

      (run-at-time "10 min" 600 'org-save-all-org-buffers)
      (evil-leader/set-key-for-mode 'org-mode
	"oh" 'org-insert-heading
	"ol" 'org-babel-load-file
	"os" 'org-sort-list
	"ot" 'org-todo
	"oT" 'my/evil-org-insert-todo
	"obt" 'org-babel-tangle)
    
      ))

  ;; From https://github.com/jcf/emacs.d/blob/master/init-evil.org
  (defun my/evil-org-insert-todo ()
    "Insert a new TODO heading, and switch to insert mode."
    (interactive)
    (org-insert-todo-heading nil)
    (evil-insert 0))

#+END_SRC



*** Todo

#+BEGIN_SRC emacs-lisp

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d)")
              (sequence "|" "CANCELLED(c@/!)")
              (type "PROJECT(p)" "BLOCKED(b@/!)" "SOMEDAY(y!)")
              (type "PHONE" "MEETING" "NOTE"))))

#+END_SRC

**** Keyword Faces

#+BEGIN_SRC emacs-lisp

; Colors good!
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "yellow")
              ("NEXT" :foreground "orange" :weight bold)
              ("STARTED" :foreground "firebrick3" :weight bold)
              ("DONE" :foreground "forest green" :weight bold :strike-through "green")
              ("CANCELLED" :foreground "forest green" :weight bold :strike-through "red")
              ;; typed todos
              ("PROJECT" :foreground "gray" :weight bold)
              ("BLOCKED" :foreground "red" :weight bold)
              ("SOMEDAY" :foreground "plum3" :weight bold)
              ("MEETING" :foreground "blue" :slant italic)
              ("PHONE" :foreground "blue" :slant italic)
              ("NOTE" :foreground "blue"))))

#+END_SRC

**** Todo State Triggers

#+BEGIN_SRC emacs-lisp

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("SOMEDAY" ("SOMEDAY" . t))
              ("BLOCKED" ("SOMEDAY") ("BLOCKED" . t))
              (done ("BLOCKED") ("SOMEDAY"))
              ("TODO" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("NEXT" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("STARTED" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("PROJECT" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("DONE" ("BLOCKED") ("CANCELLED") ("SOMEDAY")))))

#+END_SRC

**** Logging

#+BEGIN_SRC emacs-lisp

(setq org-log-done 'time)

#+END_SRC

*** Agenda

#+BEGIN_SRC emacs-lisp

    (use-package org-agenda
      :ensure org-plus-contrib
      :defer t
      :bind (("C-c a" . org-agenda))
      :init
      (progn
	(setq org-directory (expand-file-name "org" my-personal-dir))
	(setq org-default-notes-file (expand-file-name "todo.org"  org-directory))
	(setq org-default-bookmarks-file (expand-file-name "bookmarks.org" org-directory))
	(defvar org-default-journal-file (expand-file-name "journal.org" org-directory)
	  "File to dump journal entries into"))

      :config
      (progn
	(setq org-agenda-files (list org-directory))
	(setq org-agenda-prefix-format
	      '((agenda . " %i %-12:c%?-12t% s")
		(timeline . "  % s")
		(todo . " %i %-12:T")
		(tags . " %i %-12:T")
		(search . " %i %-12:T")))

	;; Sorting order for tasks on the agenda
	(setq org-agenda-sorting-strategy
	      (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
		      (todo category-up effort-up)
		      (tags category-up effort-up)
		      (search category-up))))

	(setq org-agenda-custom-commands
	      '(("O" "Office block agenda"
		 ((agenda "" ((org-agenda-span 3)
			      (org-agenda-start-on-weekday nil)))
		  ;; limits the agenda display to a single day
		  (tags-todo "@work|moz|phone")
		  (todo "TODO" ((org-agenda-files org-default-notes-file)))
		  ;; limits the tag search to the file inbox.org
		  (todo "BLOCKED")))
		("b" "Projects"
		 ((todo "PROJECT")))
		("W" "Weekly Review"
		 ((agenda "" ((org-agenda-ndays 7))) ;; review upcoming deadlines and appointments
		  ;; type "l" in the agenda to review logged items
		  (stuck "") ;; review stuck projects as designated by org-stuck-projects
		  (todo "PROJECT") ;; review all projects (assuming you use todo keywords to designate projects)
		  (todo "MAYBE") ;; review someday/maybe items
		  (todo "WAITING")))
		("d" "Upcoming deadlines" agenda ""
		 ((org-agenda-time-grid nil)
		  (org-deadline-warning-days 365)
		  (org-agenda-entry-types '(:deadline))))
		("c" "Calendar" agenda ""
		 ((org-agenda-ndays 7)
		  (org-agenda-start-on-weekday 0)
		  (org-agenda-time-grid nil)
		  (org-agenda-repeating-timestamp-show-all t)
		  (org-agenda-entry-types '(:timestamp :sexp))))))

	(setq org-agenda-dim-blocked-tasks t)
	(setq org-agenda-show-all-dates t)
	(setq org-agenda-span 'week)
	(setq org-agenda-compact-blocks t)
	(setq org-agenda-repeating-timestamp-show-all t)
	(setq org-agenda-show-all-dates t)
	(setq org-agenda-skip-deadline-if-done t)
	(setq org-agenda-skip-scheduled-if-done t)
	(setq org-agenda-start-on-weekday 1)
	(setq org-agenda-start-with-log-mode t)
	(setq org-agenda-tags-column -100)
	(setq org-agenda-time-grid (quote ((daily today remove-match)
					   #("----------------" 0 16 (org-heading t))
					   (0900 1100 1300 1500 1700 1900))))
	(setq org-agenda-todo-ignore-deadlines nil)
	(setq org-agenda-todo-ignore-scheduled t)
	(setq org-agenda-todo-ignore-timestamp t)
	(setq org-agenda-todo-ignore-with-date nil))
  )

#+END_SRC

*** Progress Logging

*** Habit Tracking

#+BEGIN_SRC emacs-lisp

(use-package org-habit
  :ensure org-plus-contrib
  :defer t
  :config
  (setq org-habit-graph-column 45)
  (setq org-habit-preceding-days 28)
  (setq org-habit-following-days 1)
  (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t))))

#+END_SRC

*** Checkboxes

*** Tags

#+BEGIN_SRC emacs-lisp

  (setq org-tag-alist '((:startgroup . nil)
                             ("@work" . ?w) 
			     ("@home" . ?h)
			     ("@shop" . ?s)
                             ("@errands" . ?e)
                             (:endgroup . nil)
                             ("computer" . ?c) ("kalyn" . ?k) ("phone" . ?p)))

#+END_SRC

*** Dates and Times

**** DONE Clocking Work Time
     CLOSED: [2017-02-01 Wed 13:35]

#+BEGIN_SRC emacs-lisp

  (use-package org-clock
    :ensure org-plus-contrib
    :defer t
    :bind (
      ("C-c j" . org-clock-goto)
      ("C-c C-x C-o" . org-clock-out))
    :init
    (progn
      (setq org-expiry-inactive-timestamps t)
      (setq org-clock-idle-time nil)
      (setq org-log-done 'time)
      (setq org-clock-continuously nil)
      (setq org-clock-persist t)
      (setq org-clock-in-switch-to-state "STARTED")
      (setq org-clock-in-resume t)
      (setq org-show-notification-handler 'message)
      (setq org-clock-report-include-clocking-task t)
      (setq org-clock-history-length 32)
      (setq org-log-into-drawer "LOGBOOK")
      (setq org-clock-into-drawer 1)
      (setq org-clock-out-remove-zero-time-clocks t)
      (setq org-clock-persistence-insinuate t))
    :config
    (progn
      (org-clock-persistence-insinuate)))

#+END_SRC

**** TODO Effort Estimates                                   :@work:computer:

#+BEGIN_SRC emacs-lisp

(add-to-list 'org-global-properties
      '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))

#+END_SRC

From http://orgmode.org/worg/org-hacks.html

#+BEGIN_SRC emacs-lisp

(add-hook 'org-clock-in-prepare-hook
          'my/org-mode-ask-effort)

(defun my/org-mode-ask-effort ()
  "Ask for an effort estimate when clocking in."
  (unless (org-entry-get (point) "Effort")
    (let ((effort
           (completing-read
            "Effort: "
            (org-entry-get-multivalued-property (point) "Effort_ALL"))))
      (unless (equal effort "")
        (org-set-property "Effort" effort)))))

#+END_SRC

*** TODO Capture

#+BEGIN_SRC emacs-lisp

  (use-package org-capture
    :ensure org-plus-contrib
    :bind (("C-c c" . org-capture))
    :config
    (progn
      (add-to-list 'org-capture-templates
		   '("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
		     "* TODO %?\n  %i\n  %a"))
      (add-to-list 'org-capture-templates
		   '("j" "Journal" entry (file+datetree org-default-journal-file)
		     "* %?\nEntered on %U\n  %i\n  %a"))))

#+END_SRC

**** TODO org-projectile for Project TODOs


*** DONE Refile
    CLOSED: [2017-02-01 Wed 17:44]
    :PROPERTIES:
    :Effort:   :15
    :END:
    :LOGBOOK:
    CLOCK: [2017-02-01 Wed 17:30]--[2017-02-01 Wed 17:44] =>  0:14
    :END:

#+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path 'file)                  ; Show full paths for refiling

#+END_SRC

*** TODO Attachments

*** TODO Protocols

*** TODO Archiving

*** TODO Exporting

*** TODO Publishing

*** TODO Source Code


*** TODO Org-Projectile

#+BEGIN_SRC emacs-lisp

(use-package org-projectile
  :bind (("C-c n p" . org-projectile:project-todo-completing-read))
  :config
  (progn
    (org-projectile:per-repo)
    (setq org-projectile:projects-file 
          "TODO.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))
    (add-to-list 'org-capture-templates (org-projectile:project-todo-entry "p"))))

#+END_SRC

*** Miscellaneous
**** Crypto

#+BEGIN_SRC emacs-lisp

  (use-package org-crypt
    :ensure org-plus-contrib
    :config
    (progn
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
      (setq org-crypt-key "E5C5C41A")
      (setq org-crypt-disable-auto-save nil)
      (org-crypt-use-before-save-magic)))

#+END_SRC

**** Completion

**** Templates


* Custom Functions

#+BEGIN_SRC emacs-lisp

(defun my/move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun my/move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(bind-key "M-<up>" 'my/move-line-up)
(bind-key "M-<down>" 'my/move-line-down)

#+END_SRC
